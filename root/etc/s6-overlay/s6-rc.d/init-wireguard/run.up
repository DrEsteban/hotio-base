#!/command/with-contenv bash
# shellcheck shell=bash

umask "${UMASK}"

if [[ ${VPN_ENABLED} == "true" ]] && [[ ! -d "${CONFIG_DIR}/wireguard/" ]]; then
    mkdir "${CONFIG_DIR}/wireguard"
    find "${CONFIG_DIR}/wireguard" -maxdepth 0 \( ! -user hotio -or ! -group hotio \) -exec chown hotio:hotio {} +
fi

if [[ ${VPN_ENABLED} == "true" ]] && [[ ${VPN_PROVIDER} == "pia" ]]; then
    if [[ ! -f "${CONFIG_DIR}/wireguard/pia-regions.txt" ]]; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [PIA] Downloading regions list to [${CONFIG_DIR}/wireguard/pia-regions.txt]..."
        curl -fsSL --retry 5 --retry-max-time 60 --max-time 10 https://serverlist.piaservers.net/vpninfo/servers/v6 | head -1 | jq -r '"Region|Name|Port Forwarding", "------|----|---------------", (.regions[] | "\(.id)|\(.name)|\(.port_forward)")' | awk 'NR<3{print $0;next}{print $0| "sort"}' | column -t -c 3 -s "|" > "${CONFIG_DIR}/wireguard/pia-regions.txt"
        find "${CONFIG_DIR}/wireguard/pia-regions.txt" -maxdepth 0 \( ! -user hotio -or ! -group hotio \) -exec chown hotio:hotio {} +
    fi
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [PIA] Trying to get a WireGuard config..."
    cd "${APP_DIR}/pia-scripts"
    if PIA_USER=${VPN_PIA_USER} PIA_PASS=${VPN_PIA_PASS} PREFERRED_REGION=${VPN_PIA_PREFERRED_REGION} DISABLE_IPV6="no" AUTOCONNECT="" PIA_CONNECT="false" PIA_PF="${VPN_AUTO_PORT_FORWARD}" VPN_PROTOCOL=wireguard PIA_CONF_PATH="${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" DIP_TOKEN="${VPN_PIA_DIP_TOKEN}" PIA_DNS=true timeout 60s "./run_setup.sh" > "${CONFIG_DIR}/wireguard/pia.log" 2>&1; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [PIA] WireGuard config written to [${CONFIG_DIR}/wireguard/${VPN_CONF}.conf]."
    else
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [PIA] Something went wrong trying to get a WireGuard config. See log file [${CONFIG_DIR}/wireguard/pia.log]. Exiting..."
        exit 1
    fi
fi

if [[ ${VPN_ENABLED} == "true" ]]; then
    if ! capsh --print | grep -q "Current:.*cap_net_admin"; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [--cap-add=NET_ADMIN] is not set or running with [--privileged=true]. Exiting..."
        echo "Add: --cap-add=NET_ADMIN"
        echo "Remove: --privileged=true"
        exit 1
    fi

    unset rp_filter_strict
    for file in /proc/sys/net/ipv4/conf/*; do
        [[ "$(cat "/proc/sys/net/ipv4/conf/${file##*/}/rp_filter")" != "0" ]] && rp_filter_strict="true"
    done
    if [[ "${rp_filter_strict}" == "true" ]] && [[ "$(cat /proc/sys/net/ipv4/conf/all/src_valid_mark)" != "1" ]]; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [--sysctl=\"net.ipv4.conf.all.src_valid_mark=1\"] is not set and [rp_filter] is set to [strict]. Exiting..."
        echo "Add: --sysctl=\"net.ipv4.conf.all.src_valid_mark=1\""
        exit 1
    fi
    sed -i "s:sysctl -q net.ipv4.conf.all.src_valid_mark=1:echo skipping setting net.ipv4.conf.all.src_valid_mark:" /usr/bin/wg-quick

    if [[ "$(cat /proc/sys/net/ipv6/conf/all/disable_ipv6)" != "1" ]]; then
        echo "[WRN] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [--sysctl=\"net.ipv6.conf.all.disable_ipv6=1\"] is not set. Consider disabling ipv6."
        echo "Add: --sysctl=\"net.ipv6.conf.all.disable_ipv6=1\""
    fi

    if ip a show docker0 up > /dev/null 2>&1; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Docker network type [host] is not supported with VPN enabled. Exiting..."
        echo "Use: bridge (preferably custom)"
        exit 1
    fi

    if [[ ! -f "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" ]]; then
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Configuration file [${CONFIG_DIR}/wireguard/${VPN_CONF}.conf] was not found. Exiting..."
        exit 1
    else
        find "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" -maxdepth 0 \( ! -user hotio -or ! -group hotio \) -exec chown hotio:hotio {} +
        chmod 600 "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf"
        if [[ "${VPN_CONF}" != *"-nofix" ]]; then
            sed -i 's#0.0.0.0/0#0.0.0.0/1,128.0.0.0/1#g' "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf"
        fi
    fi

    if [[ ${VPN_KEEP_LOCAL_DNS} == "true" ]] && grep ^DNS "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" > /dev/null; then
        resolv=$(cat "/etc/resolv.conf")
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Current resolv.conf is:"
        echo "${resolv}"
    fi

    if wg-quick down "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" > /dev/null 2>&1; then
        echo "[WRN] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard is still running. Stopping WireGuard..."
        sleep 5
    fi

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Starting WireGuard..."
    if wg-quick up "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf"; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard is started."
    else
        echo "[ERR] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard failed to start!"
        exit 1
    fi

    while true; do
        if ip a show "${VPN_CONF}" up > /dev/null 2>&1; then
            break
        else
            echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Waiting for [${VPN_CONF}] interface to come online."
            sleep 5
        fi
    done

    if [[ ${VPN_KEEP_LOCAL_DNS} == "true" ]] && grep ^DNS "${CONFIG_DIR}/wireguard/${VPN_CONF}.conf" > /dev/null; then
        echo "${resolv}" >> "/etc/resolv.conf"
        resolv=$(cat "/etc/resolv.conf")
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] New resolv.conf is:"
        echo "${resolv}"
    fi

    set -e

    vpn_endpoint=$(wg show | grep endpoint: | awk '{print $2}')
    vpn_endpoint_port=${vpn_endpoint##*:}
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard [${VPN_CONF}] endpoint is [${vpn_endpoint}]."

    vpn_allowedips=$(wg show | grep 'allowed ips:' | awk -F ': ' '{print $2}')
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] WireGuard [${VPN_CONF}] allowed ips is [${vpn_allowedips}]."

    nw_interface=$(ip -o -4 route show to default | awk '{print $5}')
    nw_gateway=$(ip -o -4 route show to default | awk '{print $3}')
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Default gateway is [${nw_gateway}] via interface [${nw_interface}]."

    docker_cidrs=$(ip -o -4 route show proto kernel | awk '{print $1}')
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Docker networks are [$(awk '{printf ",%s" $0}' <<< "${docker_cidrs}" | sed 's/^,//')]."

    IFS=',' read -ra lan_networks <<< "${VPN_LAN_NETWORK%,}"
    for lan_network in "${lan_networks[@]}"; do
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Adding [${lan_network}][LAN] as route via interface [${nw_interface}]."
        ip route add "${lan_network}" via "${nw_gateway}" dev "${nw_interface}"
    done

    if [[ "${VPN_CONF}" != *"-nofix" ]]; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Adding [${vpn_endpoint%:*}][${VPN_CONF}] as route via interface [${nw_interface}]."
        ip route add "${vpn_endpoint%:*}" via "${nw_gateway}" dev "${nw_interface}"
    fi

    if [[ "${PRIVOXY_ENABLED}" == true ]]; then
        PRIVOXY_PORT=$(grep 'listen-address' "${CONFIG_DIR}/privoxy/privoxy.conf" | sed 's/^.*://')
        PRIVOXY_PORTS="${PRIVOXY_PORT}/tcp,${PRIVOXY_PORT}/udp"
    fi

    IFS=',' read -ra ports <<< "${WEBUI_PORTS%,}"
    for port in "${ports[@]}"; do
        open_ports+="${port},"
    done
    IFS=',' read -ra ports <<< "${VPN_EXPOSE_PORTS_ON_LAN%,}"
    for port in "${ports[@]}"; do
        open_ports+="${port},"
    done
    IFS=',' read -ra ports <<< "${VPN_ADDITIONAL_PORTS%,}"
    for port in "${ports[@]}"; do
        open_ports+="${port},"
    done
    IFS=',' read -ra ports <<< "${PRIVOXY_PORTS%,}"
    for port in "${ports[@]}"; do
        open_ports+="${port},"
    done
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Ports opened on [${nw_interface}] are [${open_ports%,}]."
    IFS=',' read -ra ports <<< "${open_ports%,}"
    for port in "${ports[@]}"; do
        grep -q "${port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
        closed_ports+="${port},"
    done
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Ports closed on [${VPN_CONF}] are [${closed_ports%,}]."
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Ports redirected on [${VPN_CONF}] are [${VPN_AUTO_PORT_FORWARD_TO_PORTS%,}]."

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] ip route overview:"
    ip route

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Configuring iptables..."
    iptables -P FORWARD DROP

    iptables -P INPUT DROP
    iptables -A INPUT -i "${VPN_CONF}" -p udp -j ACCEPT
    iptables -A INPUT -i "${VPN_CONF}" -p tcp -j ACCEPT
    for nw_cidr in $docker_cidrs; do
        iptables -A INPUT -s "${nw_cidr}" -d "${nw_cidr}" -j ACCEPT
    done
    iptables -A INPUT -i "${nw_interface}" -p udp --sport "${vpn_endpoint_port}" -s "${vpn_endpoint%:*}/32" -j ACCEPT
    iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
    iptables -A INPUT -i lo -j ACCEPT
    IFS=',' read -ra additional_ports <<< "${open_ports%,}"
    for additional_port in "${additional_ports[@]}"; do
        iptables -A INPUT -i "${nw_interface}" -p "${additional_port##*/}" --dport "${additional_port%/*}" -j ACCEPT
        grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
        iptables -I INPUT -i "${VPN_CONF}" -p "${additional_port##*/}" --dport "${additional_port%/*}" -j DROP
    done

    iptables -P OUTPUT DROP
    iptables -A OUTPUT -o "${VPN_CONF}" -p udp -j ACCEPT
    iptables -A OUTPUT -o "${VPN_CONF}" -p tcp -j ACCEPT
    for nw_cidr in $docker_cidrs; do
        iptables -A OUTPUT -s "${nw_cidr}" -d "${nw_cidr}" -j ACCEPT
    done
    iptables -A OUTPUT -o "${nw_interface}" -p udp --dport "${vpn_endpoint_port}" -d "${vpn_endpoint%:*}/32" -j ACCEPT
    iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT
    IFS=',' read -ra additional_ports <<< "${open_ports%,}"
    for additional_port in "${additional_ports[@]}"; do
        iptables -A OUTPUT -o "${nw_interface}" -p "${additional_port##*/}" --sport "${additional_port%/*}" -j ACCEPT
        grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
        iptables -I OUTPUT -o "${VPN_CONF}" -p "${additional_port##*/}" --sport "${additional_port%/*}" -j DROP
    done

    unset ipv6_wanted
    for file in /proc/sys/net/ipv6/conf/*; do
        [[ "$(cat "/proc/sys/net/ipv6/conf/${file##*/}/disable_ipv6")" == "0" ]] && ipv6_wanted="true"
    done

    [[ -z "${ipv6_wanted}" ]] && echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] ipv6 is disabled, we will not set ip6tables rules."

    if [[ ${ipv6_wanted} == "true" ]]; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Configuring ip6tables..."
        ip6tables -P FORWARD DROP 1>&- 2>&-

        ip6tables -P INPUT DROP 1>&- 2>&-
        ip6tables -A INPUT -i "${VPN_CONF}" -p udp -j ACCEPT
        ip6tables -A INPUT -i "${VPN_CONF}" -p tcp -j ACCEPT
        IFS=',' read -ra additional_ports <<< "${open_ports%,}"
        for additional_port in "${additional_ports[@]}"; do
            grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
            ip6tables -I INPUT -i "${VPN_CONF}" -p "${additional_port##*/}" --dport "${additional_port%/*}" -j DROP
        done

        ip6tables -P OUTPUT DROP 1>&- 2>&-
        ip6tables -A OUTPUT -o "${VPN_CONF}" -p udp -j ACCEPT
        ip6tables -A OUTPUT -o "${VPN_CONF}" -p tcp -j ACCEPT
        IFS=',' read -ra additional_ports <<< "${open_ports%,}"
        for additional_port in "${additional_ports[@]}"; do
            grep -q "${additional_port}" <<< "${VPN_AUTO_PORT_FORWARD_TO_PORTS}" && continue
            ip6tables -I OUTPUT -o "${VPN_CONF}" -p "${additional_port##*/}" --sport "${additional_port%/*}" -j DROP
        done
    fi

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] iptables overview:"
    iptables -S
    if [[ ${ipv6_wanted} == "true" ]]; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] ip6tables overview:"
        ip6tables -S
    fi

    set +e

    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] Performing internet connectivity test..."
    echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV4] $(curl -fsL -4 --retry 5 --retry-max-time 60 --max-time 10 wtfismyip.com/json | jq -r '"[\(.YourFuckingLocation)] [\(.YourFuckingISP)] [\(.YourFuckingIPAddress)]"')"
    if [[ ${ipv6_wanted} == "true" ]]; then
        echo "[INF] [$(date '+%Y-%m-%d %H:%M:%S')] [VPN] [IPV6] $(curl -fsL -6 --retry 5 --retry-max-time 60 --max-time 10 wtfismyip.com/json | jq -r '"[\(.YourFuckingLocation)] [\(.YourFuckingISP)] [\(.YourFuckingIPAddress)]"')"
    fi
fi
